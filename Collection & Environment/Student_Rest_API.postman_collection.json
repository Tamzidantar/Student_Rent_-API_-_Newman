{
	"info": {
		"_postman_id": "e5ffb995-dd35-434e-81ce-5cec5102b067",
		"name": "Student_Rest_API",
		"description": "_**API Test of Student Rent**_",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38560436"
	},
	"item": [
		{
			"name": "Get_Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var status_Code = responseCode.code;\r",
							"switch(status_Code){\r",
							"    case 200:\r",
							"        var jsondata = pm.response.json()\r",
							"        console.log(jsondata.length)\r",
							"        pm.test(\"length of array\",jsondata.length)\r",
							"        pm.test(\"Status code is 200\")\r",
							"        break;\r",
							"    case 201:\r",
							"       pm.test(\"created Request-201\");\r",
							"        break;\r",
							"    case 400:\r",
							"       pm.test(\"Bad Request-400\");\r",
							"       break;\r",
							"    case 401:\r",
							"       pm.test(\"Unauthorized Request-401\");\r",
							"       break;\r",
							"    case 402:\r",
							"       pm.test(\"Payment Request-402\");\r",
							"       break;\r",
							"    case 403:\r",
							"       pm.test(\"Forbidden-403\");\r",
							"       break;\r",
							"    case 404:\r",
							"       pm.test(\"Not Found-404\");\r",
							"       break;\r",
							"    case 405:\r",
							"       pm.test(\"Method Not Allowed=405\");\r",
							"       break;\r",
							"    case 500:\r",
							"       pm.test(\"Internal Server Error-500\");\r",
							"       break;\r",
							"    case 501:\r",
							"       pm.test(\"Not Implemented-501\");\r",
							"       break;\r",
							"    case 502:\r",
							"       pm.test(\"Bad Gateway-502\");\r",
							"       break;\r",
							"    case 503:\r",
							"       pm.test(\"Service Unavailable-503\");\r",
							"       break;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/studentsDetails",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"studentsDetails"
					]
				},
				"description": "1. **Write a test case for Status Code Validation**\n    \n2. **Check the length of the response.**"
			},
			"response": []
		},
		{
			"name": "Create_Student",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstname = pm.variables.replaceIn(\"{{$randomNameSuffix}}\")\r",
							"pm.environment.set(\"Firstname\",firstname)\r",
							"var middle_name = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"pm.environment.set(\"Middle_name\",middle_name)\r",
							"var lastname = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"pm.environment.set(\"Lastname\",lastname)\r",
							"\r",
							"// Random Date of Birth Generator \r",
							"function randomDate(start, end){\r",
							"    return new Date(start.getTime() + Math.random() * (end.getTime()- start.getTime()));\r",
							"}\r",
							"\r",
							"var date = randomDate(new Date(2000,0,1),new Date());\r",
							"var year_last_integer = Math.floor(Math.random() * 10);\r",
							"var formattedDate = (date.getMonth()+1)+'-' + date.getDate()+'-'+ '199'+year_last_integer;\r",
							"pm.environment.set(\"date_of_birth\",formattedDate);\r",
							"console.log(formattedDate)\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var status_Code = responseCode.code;\r",
							"switch(status_Code){\r",
							"    case 200:\r",
							"        \r",
							"        pm.test(\"Status code is 200\")\r",
							"        break;\r",
							"    case 201:\r",
							"       var ID = pm.response.json()\r",
							"         pm.environment.set(\"Id\",ID.id);\r",
							"       pm.test(\"created Request-201\");\r",
							"        break;\r",
							"    case 400:\r",
							"       pm.test(\"Bad Request-400\");\r",
							"       break;\r",
							"    case 401:\r",
							"       pm.test(\"Unauthorized Request-401\");\r",
							"       break;\r",
							"    case 402:\r",
							"       pm.test(\"Payment Request-402\");\r",
							"       break;\r",
							"    case 403:\r",
							"       pm.test(\"Forbidden-403\");\r",
							"       break;\r",
							"    case 404:\r",
							"       pm.test(\"Not Found-404\");\r",
							"       break;\r",
							"    case 405:\r",
							"       pm.test(\"Method Not Allowed=405\");\r",
							"       break;\r",
							"    case 500:\r",
							"       pm.test(\"Internal Server Error-500\");\r",
							"       break;\r",
							"    case 501:\r",
							"       pm.test(\"Not Implemented-501\");\r",
							"       break;\r",
							"    case 502:\r",
							"       pm.test(\"Bad Gateway-502\");\r",
							"       break;\r",
							"    case 503:\r",
							"       pm.test(\"Service Unavailable-503\");\r",
							"       break;\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"first_name\": \"{{Firstname}}\",\r\n \"middle_name\": \"{{Middle_name}}\",\r\n \"last_name\": \"{{Lastname}}\",\r\n \"date_of_birth\": \"{{date_of_birth}}\"\r\n }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/studentsDetails",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"studentsDetails"
					]
				},
				"description": "1. **Write a test case for Status Code Validation.**\n    \n\nBody  \n{  \n\"first_name\": \"sample string 2\",  \n\"middle_name\": \"sample string 3\",  \n\"last_name\": \"sample string 4\",  \n\"date_of_birth\": \"sample string 5\"  \n}"
			},
			"response": []
		},
		{
			"name": "Get_Specific_Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var status_Code = responseCode.code;\r",
							"switch(status_Code){\r",
							"    case 200:\r",
							"        var exam = pm.response.json()\r",
							"pm.test(\"Id validation\",function(){\r",
							"    pm.expect(exam.data.id).to.eql(pm.environment.get(\"Id\"))\r",
							"})\r",
							"pm.test(\"First name validation\",function(){\r",
							"    pm.expect(exam.data.first_name).to.eql(pm.environment.get(\"Firstname\"))\r",
							"})\r",
							"pm.test(\"Middle name validation\",function(){\r",
							"    pm.expect(exam.data.middle_name).to.eql(pm.environment.get(\"Middle_name\"))\r",
							"})\r",
							"pm.test(\"Last name validation\",function(){\r",
							"    pm.expect(exam.data.last_name).to.eql(pm.environment.get(\"Lastname\"))\r",
							"})\r",
							"pm.test(\"Date of birth validation\",function(){\r",
							"    pm.expect(exam.data.date_of_birth).to.eql(pm.environment.get(\"date_of_birth\"))\r",
							"})\r",
							"\r",
							"        pm.test(\"Status code is 200\")\r",
							"        break;\r",
							"    case 201:\r",
							"       \r",
							"       pm.test(\"created Request-201\");\r",
							"        break;\r",
							"    case 400:\r",
							"       pm.test(\"Bad Request-400\");\r",
							"       break;\r",
							"    case 401:\r",
							"       pm.test(\"Unauthorized Request-401\");\r",
							"       break;\r",
							"    case 402:\r",
							"       pm.test(\"Payment Request-402\");\r",
							"       break;\r",
							"    case 403:\r",
							"       pm.test(\"Forbidden-403\");\r",
							"       break;\r",
							"    case 404:\r",
							"       pm.test(\"Not Found-404\");\r",
							"       break;\r",
							"    case 405:\r",
							"       pm.test(\"Method Not Allowed=405\");\r",
							"       break;\r",
							"    case 500:\r",
							"       pm.test(\"Internal Server Error-500\");\r",
							"       break;\r",
							"    case 501:\r",
							"       pm.test(\"Not Implemented-501\");\r",
							"       break;\r",
							"    case 502:\r",
							"       pm.test(\"Bad Gateway-502\");\r",
							"       break;\r",
							"    case 503:\r",
							"       pm.test(\"Service Unavailable-503\");\r",
							"       break;\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/studentsDetails/{{Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"studentsDetails",
						"{{Id}}"
					]
				},
				"description": "1. **Write a test case for Status Code Validation.**\n    \n2. **Write a test case for (id, first name, middle name, last name, date of birth) field value validation.**"
			},
			"response": []
		},
		{
			"name": "Create Technical Skills",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var status_Code = responseCode.code;\r",
							"switch(status_Code){\r",
							"    case 200:\r",
							"       var skills = pm.response.json()\r",
							"       pm.test(\"You have successfully create Technical Skills\",function(){\r",
							"        pm.expect(skills.msg).to.eql(\"Add  data success\")\r",
							"       })\r",
							"        \r",
							"        pm.test(\"Status code is 200\")\r",
							"        break;\r",
							"    case 201:\r",
							"       pm.test(\"created Request-201\");\r",
							"        break;\r",
							"    case 400:\r",
							"       pm.test(\"Bad Request-400\");\r",
							"       break;\r",
							"    case 401:\r",
							"       pm.test(\"Unauthorized Request-401\");\r",
							"       break;\r",
							"    case 402:\r",
							"       pm.test(\"Payment Request-402\");\r",
							"       break;\r",
							"    case 403:\r",
							"       pm.test(\"Forbidden-403\");\r",
							"       break;\r",
							"    case 404:\r",
							"       pm.test(\"Not Found-404\");\r",
							"       break;\r",
							"    case 405:\r",
							"       pm.test(\"Method Not Allowed=405\");\r",
							"       break;\r",
							"    case 500:\r",
							"       pm.test(\"Internal Server Error-500\");\r",
							"       break;\r",
							"    case 501:\r",
							"       pm.test(\"Not Implemented-501\");\r",
							"       break;\r",
							"    case 502:\r",
							"       pm.test(\"Bad Gateway-502\");\r",
							"       break;\r",
							"    case 503:\r",
							"       pm.test(\"Service Unavailable-503\");\r",
							"       break;\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var yearexp = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"pm.environment.set(\"Yearexp\",yearexp)\r",
							"\r",
							"// Random Date of Birth Generator \r",
							"function randomDate(start, end){\r",
							"    return new Date(start.getTime() + Math.random() * (end.getTime()- start.getTime()));\r",
							"}\r",
							"\r",
							"var date = randomDate(new Date(2000,0,1),new Date());\r",
							"var year_last_integer = Math.floor(Math.random() * 10);\r",
							"var formattedDate = (date.getMonth()+1)+'-' + date.getDate()+'-'+ '201'+year_last_integer;\r",
							"pm.environment.set(\"lastused\",formattedDate);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n \"id\": 1,\r\n \"language\": [\r\n \"English\",\r\n \"Bangla\",\r\n \"Hindi\"\r\n ],\r\n \"yearexp\": \"{{Yearexp}}\",\r\n \"lastused\": \"{{lastused}}\",\r\n \"st_id\": {{Id}}\r\n }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/technicalskills",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"technicalskills"
					]
				},
				"description": "1. **Write a test case for Status Code Validation.**\n    \n    Body  \n    {  \n    \"id\": 1,  \n    \"language\": \\[  \n    \"sample string 1\",  \n    \"sample string 2\"  \n    \\],  \n    \"yearexp\": \"sample string 2\",  \n    \"lastused\": \"sample string 3\",  \n    \"st_id\": **id**  \n    }"
			},
			"response": []
		},
		{
			"name": "Create Student Address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var status_Code = responseCode.code;\r",
							"switch(status_Code){\r",
							"    case 200:\r",
							"        var sta = pm.response.json()\r",
							"        pm.test(\"Status validation\",function(){\r",
							"            pm.expect(sta.status).to.eql(\"true\")\r",
							"        })\r",
							"        pm.test(\"Message validation\",function(){\r",
							"            pm.expect(sta.msg).to.eql(\"Add  data success\")\r",
							"        })\r",
							"        pm.test(\"Status code is 200\")\r",
							"        break;\r",
							"    case 201:\r",
							"       \r",
							"       pm.test(\"created Request-201\");\r",
							"        break;\r",
							"    case 400:\r",
							"       pm.test(\"Bad Request-400\");\r",
							"       break;\r",
							"    case 401:\r",
							"       pm.test(\"Unauthorized Request-401\");\r",
							"       break;\r",
							"    case 402:\r",
							"       pm.test(\"Payment Request-402\");\r",
							"       break;\r",
							"    case 403:\r",
							"       pm.test(\"Forbidden-403\");\r",
							"       break;\r",
							"    case 404:\r",
							"       pm.test(\"Not Found-404\");\r",
							"       break;\r",
							"    case 405:\r",
							"       pm.test(\"Method Not Allowed-405\");\r",
							"       break;\r",
							"    case 500:\r",
							"       pm.test(\"Internal Server Error-500\");\r",
							"       break;\r",
							"    case 501:\r",
							"       pm.test(\"Not Implemented-501\");\r",
							"       break;\r",
							"    case 502:\r",
							"       pm.test(\"Bad Gateway-502\");\r",
							"       break;\r",
							"    case 503:\r",
							"       pm.test(\"Service Unavailable-503\");\r",
							"       break;\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var house = pm.variables.replaceIn(\"{{$randomStreetAddress}}\")\r",
							"pm.environment.set(\"House\",house)\r",
							"\r",
							"var city = pm.variables.replaceIn(\"{{$randomCity}}\")\r",
							"pm.environment.set(\"City\",city)\r",
							"\r",
							"var state = pm.variables.replaceIn(\"{{$randomStreetAddress}}\")\r",
							"pm.environment.set(\"State\",state)\r",
							"\r",
							"var country = pm.variables.replaceIn(\"{{$randomCountry}}\")\r",
							"pm.environment.set(\"Country\",country)\r",
							"\r",
							"var code1 = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"pm.environment.set(\"Stu_Code1\",code1)\r",
							"\r",
							"var home1 = pm.variables.replaceIn(\"{{$randomStreetName}}\")\r",
							"pm.environment.set(\"Home1\",home1)\r",
							"\r",
							"var mobile1 = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\")\r",
							"pm.environment.set(\"Mobile1\",mobile1)\r",
							"\r",
							"var code2 = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"pm.environment.set(\"Code2\",code2)\r",
							"\r",
							"var home2 = pm.variables.replaceIn(\"{{$randomStreetName}}\")\r",
							"pm.environment.set(\"Home2\",home2)\r",
							"\r",
							"var mobile2 = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\")\r",
							"pm.environment.set(\"Mobile2\",mobile2)\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n   \"Permanent_Address\": {\r\n   \"House_Number\": \"{{House}}\",\r\n   \"City\": \"{{City}}\",\r\n   \"State\": \"{{State}}\",\r\n   \"Country\": \"{{Country}}\",\r\n   \"PhoneNumber\": [\r\n   {\r\n  \"Std_Code\": \"{{Stu_Code1}}\",\r\n  \"Home\": \"{{Home1}}\",\r\n  \"Mobile\": \"{{Mobile1}}\"\r\n  },\r\n    {\r\n     \"Std_Code\": \"{{Code2}}\",\r\n     \"Home\": \"{{Home2}}\",\r\n     \"Mobile\": \"{{Mobile2}}\"\r\n    }\r\n   ]\r\n  },\r\n  \"stId\": {{Id}}\r\n }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/addresses",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"addresses"
					]
				},
				"description": "1. Write a test case for Status Code Validation.\n    \n2. Write a test case for status and message field value validation.\n    \n\nBody  \n{  \n\"Permanent_Address\": {  \n\"House_Number\": \"sample string 1\",  \n\"City\": \"sample string 2\",  \n\"State\": \"sample string 3\",  \n\"Country\": \"sample string 4\",  \n\"PhoneNumber\": \\[  \n{  \n\"Std_Code\": \"sample string 1\",  \n\"Home\": \"sample string 2\",  \n\"Mobile\": \"sample string 3\"  \n},  \n{  \n\"Std_Code\": \"sample string 1\",  \n\"Home\": \"sample string 2\",  \n\"Mobile\": \"sample string 3\"  \n}  \n\\]  \n},  \n\"stId\": id  \n}"
			},
			"response": []
		},
		{
			"name": "FINAL STUDENT DETAILS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var status_Code = responseCode.code;\r",
							"switch(status_Code){\r",
							"    case 200:\r",
							"        var final = pm.response.json()\r",
							"        pm.test(\"Language validation\",function(){\r",
							"            pm.expect(final.data.TechnicalDetails[0].language[0]).to.eql(\"English\")\r",
							"            pm.expect(final.data.TechnicalDetails[0].language[1]).to.eql(\"Bangla\")\r",
							"            pm.expect(final.data.TechnicalDetails[0].language[2]).to.eql(\"Hindi\")\r",
							"        })\r",
							"        pm.test(\"Year of Exprience validation\",function(){\r",
							"            pm.expect(final.data.TechnicalDetails[0].yearexp).to.eql(pm.environment.get(\"Yearexp\"))\r",
							"        })\r",
							"        pm.test(\"House Number validation\",function(){\r",
							"            pm.expect(final.data.Address[0].Permanent_Address.House_Number).to.eql(pm.environment.get(\"House\"))\r",
							"        })\r",
							"         pm.test(\"City Name validation\",function(){\r",
							"            pm.expect(final.data.Address[0].Permanent_Address.City).to.eql(pm.environment.get(\"City\"))\r",
							"        })\r",
							"        pm.test(\"Country Name validation\",function(){\r",
							"            pm.expect(final.data.Address[0].Permanent_Address.Country).to.eql(pm.environment.get(\"Country\"))\r",
							"        })\r",
							"        pm.test(\"Mobile Number validation\",function(){\r",
							"            pm.expect(final.data.Address[0].Permanent_Address.PhoneNumber[0].Mobile).to.eql(pm.environment.get(\"Mobile1\"))\r",
							"            pm.expect(final.data.Address[0].Permanent_Address.PhoneNumber[1].Mobile).to.eql(pm.environment.get(\"Mobile2\"))\r",
							"        })\r",
							"        pm.test(\"Current_Address validation\",function(){\r",
							"            pm.expect(final.data.Address[0].Current_Address).to.eql(null)\r",
							"        })        \r",
							"\r",
							"        pm.test(\"Status code is 200\")\r",
							"        break;\r",
							"    case 201:\r",
							"        pm.test(\"created Request-201\");\r",
							"        break;\r",
							"    case 400:\r",
							"       pm.test(\"Bad Request-400\");\r",
							"       break;\r",
							"    case 401:\r",
							"       pm.test(\"Unauthorized Request-401\");\r",
							"       break;\r",
							"    case 402:\r",
							"       pm.test(\"Payment Request-402\");\r",
							"       break;\r",
							"    case 403:\r",
							"       pm.test(\"Forbidden-403\");\r",
							"       break;\r",
							"    case 404:\r",
							"       pm.test(\"Not Found-404\");\r",
							"       break;\r",
							"    case 405:\r",
							"       pm.test(\"Method Not Allowed=405\");\r",
							"       break;\r",
							"    case 500:\r",
							"       pm.test(\"Internal Server Error-500\");\r",
							"       break;\r",
							"    case 501:\r",
							"       pm.test(\"Not Implemented-501\");\r",
							"       break;\r",
							"    case 502:\r",
							"       pm.test(\"Bad Gateway-502\");\r",
							"       break;\r",
							"    case 503:\r",
							"       pm.test(\"Service Unavailable-503\");\r",
							"       break;\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/FinalStudentDetails/{{Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"FinalStudentDetails",
						"{{Id}}"
					]
				},
				"description": "1. WriteatestcaseforStatusCodeValidation.\n    \n2. Writeatestcasefor(Language,YearofExperience,HouseNumber,City,Country,Mobile,Current Address)"
			},
			"response": []
		}
	]
}